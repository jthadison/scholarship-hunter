name: E2E Tests

on:
  pull_request:
  push:
    branches:
      - main
      - develop

# Cancel in-progress runs for the same workflow/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Use PostgreSQL service for test database
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scholarship_hunter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Apply database schema
        run: pnpm prisma db push --skip-generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scholarship_hunter_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/scholarship_hunter_test

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          # Database
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scholarship_hunter_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/scholarship_hunter_test

          # Clerk Authentication (mock keys for E2E tests)
          # TODO: Replace with actual secrets when available (CLERK_TEST_PUBLISHABLE_KEY, CLERK_TEST_SECRET_KEY)
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_mock_key_for_e2e_tests_not_for_production
          CLERK_SECRET_KEY: sk_test_mock_key_for_e2e_tests_do_not_use_in_production

          # Clerk URLs
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /dashboard
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /dashboard

          # Test configuration
          NODE_ENV: test
          CI: true

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: Upload HTML report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test-results/html/
          retention-days: 7

  # Type checking job (runs in parallel)
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Run type check
        run: pnpm typecheck

  # Lint job (runs in parallel)
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

  # Build job (runs in parallel)
  build:
    name: Production Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build project
        run: pnpm build
        env:
          # Required for build
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          DIRECT_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          CLERK_SECRET_KEY: sk_test_placeholder
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /dashboard
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /dashboard
          MEILISEARCH_HOST: http://localhost:7700
          MEILISEARCH_API_KEY: test_api_key

  # Quality gate job (runs after all checks)
  quality-gate:
    name: Quality Gate
    needs: [test, typecheck, lint, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check all jobs passed
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Quality gate failed!"
            echo "Test: ${{ needs.test.result }}"
            echo "TypeCheck: ${{ needs.typecheck.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi
          echo "✅ All quality checks passed!"

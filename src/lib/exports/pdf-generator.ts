/**
 * PDF Generation Utilities for Export Reports
 * Story 5.9: Export & Reporting
 */

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import type { PrivacySettings } from "./csv-generator";

export interface StudentData {
  firstName: string;
  lastName: string;
  email?: string;
}

export interface FundingData {
  totalFunding: number;
  awardsCount: number;
  successRate: number;
  averageAward: number;
  awards: {
    scholarshipName: string;
    awardAmount: number;
    decisionDate: Date | null;
    provider: string;
  }[];
}

export interface AnalyticsData {
  totalApplications: number;
  totalSubmitted: number;
  totalAwarded: number;
  totalDenied: number;
  successRate: number;
  totalFunding: number;
  averageAward: number;
  periodStart: Date;
  periodEnd: Date;
  tierBreakdown?: {
    tier: string;
    applications: number;
    awarded: number;
    successRate: number;
  }[];
}

/**
 * Formats currency for display
 */
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}

/**
 * Formats date for display
 */
function formatDate(date: Date | null | undefined): string {
  if (!date) return "N/A";
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  }).format(new Date(date));
}

/**
 * Formats percentage for display
 */
function formatPercentage(value: number): string {
  return `${Math.round(value * 100)}%`;
}

/**
 * Generates a professional Funding Summary PDF report
 *
 * @param studentData - Student information
 * @param fundingData - Funding metrics and awards
 * @param privacySettings - Privacy controls
 * @returns Promise<Blob> - PDF as blob
 */
export async function generateFundingSummaryPDF(
  studentData: StudentData,
  fundingData: FundingData,
  privacySettings: PrivacySettings = {}
): Promise<Blob> {
  // Initialize jsPDF document
  const doc = new jsPDF();

  // Apply privacy settings
  const studentName = privacySettings.excludePersonalInfo
    ? "Student"
    : `${studentData.firstName} ${studentData.lastName}`;

  let yPosition = 20;

  // Header
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  doc.text("Scholarship Funding Summary", 105, yPosition, { align: "center" });

  yPosition += 10;
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`Report for: ${studentName}`, 105, yPosition, { align: "center" });

  yPosition += 6;
  doc.setFontSize(10);
  doc.text(
    `Generated: ${formatDate(new Date())}`,
    105,
    yPosition,
    { align: "center" }
  );

  yPosition += 15;

  // Executive Summary Section
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Executive Summary", 20, yPosition);

  yPosition += 8;
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");

  const summaryLines = [
    `Total Funding Secured: ${formatCurrency(fundingData.totalFunding)}`,
    `Number of Awards: ${fundingData.awardsCount}`,
    `Success Rate: ${formatPercentage(fundingData.successRate)}`,
    `Average Award: ${formatCurrency(fundingData.averageAward)}`,
  ];

  for (const line of summaryLines) {
    doc.text(line, 25, yPosition);
    yPosition += 7;
  }

  yPosition += 10;

  // Awards Breakdown Table
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Awards Breakdown", 20, yPosition);

  yPosition += 5;

  if (fundingData.awards.length > 0) {
    const tableData = fundingData.awards.map((award) => [
      privacySettings.excludeSensitiveDetails
        ? "[REDACTED]"
        : award.scholarshipName,
      privacySettings.excludeSensitiveDetails
        ? "[REDACTED]"
        : award.provider,
      formatCurrency(award.awardAmount),
      formatDate(award.decisionDate),
    ]);

    autoTable(doc, {
      startY: yPosition,
      head: [["Scholarship", "Provider", "Award Amount", "Decision Date"]],
      body: tableData,
      theme: "grid",
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: "bold",
      },
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      columnStyles: {
        2: { halign: "right" },
      },
    });
  } else {
    yPosition += 5;
    doc.setFontSize(10);
    doc.setFont("helvetica", "italic");
    doc.text("No awards received yet.", 25, yPosition);
  }

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Scholarship Hunter`,
      105,
      285,
      { align: "center" }
    );
  }

  // Return as Blob
  return doc.output("blob");
}

/**
 * Generates a comprehensive Analytics PDF report
 *
 * @param analyticsData - Analytics metrics and trends
 * @param studentData - Student information
 * @param privacySettings - Privacy controls
 * @returns Promise<Blob> - PDF as blob
 */
export async function generateAnalyticsPDF(
  analyticsData: AnalyticsData,
  studentData: StudentData,
  privacySettings: PrivacySettings = {}
): Promise<Blob> {
  const doc = new jsPDF();

  const studentName = privacySettings.excludePersonalInfo
    ? "Student"
    : `${studentData.firstName} ${studentData.lastName}`;

  let yPosition = 20;

  // Title Page
  doc.setFontSize(22);
  doc.setFont("helvetica", "bold");
  doc.text("Scholarship Analytics Report", 105, yPosition, {
    align: "center",
  });

  yPosition += 10;
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`Report for: ${studentName}`, 105, yPosition, { align: "center" });

  yPosition += 6;
  doc.setFontSize(10);
  doc.text(
    `Report Period: ${formatDate(analyticsData.periodStart)} - ${formatDate(analyticsData.periodEnd)}`,
    105,
    yPosition,
    { align: "center" }
  );

  yPosition += 6;
  doc.text(
    `Generated: ${formatDate(new Date())}`,
    105,
    yPosition,
    { align: "center" }
  );

  yPosition += 20;

  // Executive Summary
  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("Executive Summary", 20, yPosition);

  yPosition += 10;
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");

  // Narrative summary
  const narrative = `Over this period, you've submitted ${analyticsData.totalSubmitted} scholarship applications and secured ${formatCurrency(analyticsData.totalFunding)} in funding. Your success rate of ${formatPercentage(analyticsData.successRate)} demonstrates strong performance${analyticsData.successRate >= 0.3 ? ", exceeding typical success rates" : ""}.`;

  const splitNarrative = doc.splitTextToSize(narrative, 170);
  doc.text(splitNarrative, 25, yPosition);
  yPosition += splitNarrative.length * 6 + 10;

  // Key Metrics
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Key Metrics", 20, yPosition);

  yPosition += 8;
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");

  const metrics = [
    `Total Applications: ${analyticsData.totalApplications}`,
    `Submitted Applications: ${analyticsData.totalSubmitted}`,
    `Awards Received: ${analyticsData.totalAwarded}`,
    `Denials: ${analyticsData.totalDenied}`,
    `Success Rate: ${formatPercentage(analyticsData.successRate)}`,
    `Total Funding: ${formatCurrency(analyticsData.totalFunding)}`,
    `Average Award: ${formatCurrency(analyticsData.averageAward)}`,
  ];

  for (const metric of metrics) {
    doc.text(metric, 25, yPosition);
    yPosition += 7;
  }

  // Tier Breakdown (if available)
  if (analyticsData.tierBreakdown && analyticsData.tierBreakdown.length > 0) {
    yPosition += 10;

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Success by Priority Tier", 20, yPosition);

    yPosition += 5;

    const tierTableData = analyticsData.tierBreakdown.map((tier) => [
      tier.tier,
      tier.applications.toString(),
      tier.awarded.toString(),
      formatPercentage(tier.successRate),
    ]);

    autoTable(doc, {
      startY: yPosition,
      head: [["Tier", "Applications", "Awarded", "Success Rate"]],
      body: tierTableData,
      theme: "grid",
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: "bold",
      },
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      columnStyles: {
        1: { halign: "center" },
        2: { halign: "center" },
        3: { halign: "center" },
      },
    });
  }

  // Disclaimer
  const finalY = (doc as any).lastAutoTable?.finalY || yPosition + 20;
  doc.setFontSize(8);
  doc.setFont("helvetica", "italic");
  const disclaimer = doc.splitTextToSize(
    "This report is generated from Scholarship Hunter platform data and is intended for personal use. Success rates and metrics are based on your application history.",
    170
  );
  doc.text(disclaimer, 20, finalY + 15);

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Scholarship Hunter`,
      105,
      285,
      { align: "center" }
    );
  }

  return doc.output("blob");
}

/**
 * Generates filename for PDF export
 */
export function generatePdfFilename(
  type: "funding-summary" | "analytics-report",
  studentName: string | null,
  privacySettings: PrivacySettings = {}
): string {
  const name = privacySettings.excludePersonalInfo
    ? "student"
    : (studentName || "student").toLowerCase().replace(/\s+/g, "-");

  const date = new Date().toISOString().split("T")[0];

  return `${type}-${name}-${date}.pdf`;
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// Epic 1: Foundation & Profile System
// ============================================================================

model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  email         String   @unique
  emailVerified Boolean  @default(false)
  role          UserRole @default(STUDENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student   Student?
  counselor Counselor? // Story 5.6: Counselor Portal

  @@index([clerkId])
  @@index([email])
}

enum UserRole {
  STUDENT
  COUNSELOR
  PARENT
  ADMIN
}

model Student {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName   String
  lastName    String
  dateOfBirth DateTime?
  phone       String?

  profile                  Profile?
  applications             Application[]
  documents                Document[]
  essays                   Essay[]
  matches                  Match[]
  outcomes                 Outcome[]
  analyticsSnapshots       AnalyticsSnapshot[]
  gapAnalysisSnapshots     GapAnalysisSnapshot[] // Story 5.3
  profileGoals             ProfileGoal[] // Story 5.4
  profilePositionSnapshots ProfilePositionSnapshot[] // Story 5.5
  achievements             StudentAchievement[] // Story 5.5
  notifications            Notification[]
  notificationPreferences  NotificationPreferences?
  alerts                   Alert[] // Story 3.4
  counselorPermissions     StudentCounselorPermission[] // Story 5.6: Counselor access permissions
  atRiskEvents             AtRiskEvent[] // Story 3.10: At-Risk Application Detection
  exportHistory            ExportHistory[] // Story 5.9: Export & Reporting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Profile {
  id        String  @id @default(cuid())
  studentId String  @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Academic Data
  gpa            Float?
  gpaScale       Float   @default(4.0)
  satScore       Int?
  actScore       Int?
  classRank      Int?
  classSize      Int?
  graduationYear Int?
  currentGrade   String?

  // Demographics
  gender      String?
  ethnicity   String[]
  state       String?
  city        String?
  zipCode     String?
  citizenship String?

  // Financial
  financialNeed     FinancialNeed?
  pellGrantEligible Boolean        @default(false)
  efcRange          String?

  // Major & Field
  intendedMajor String?
  fieldOfStudy  String?
  careerGoals   String?

  // Experience
  extracurriculars Json?
  volunteerHours   Int   @default(0)
  workExperience   Json?
  leadershipRoles  Json?
  awardsHonors     Json?

  // Special Circumstances
  firstGeneration     Boolean @default(false)
  militaryAffiliation String?
  disabilities        String?
  additionalContext   String?

  // Profile Metadata
  completionPercentage Float @default(0)
  strengthScore        Float @default(0)

  // Story 1.7: Strength history tracking
  strengthHistory ProfileHistory[]

  // Story 1.10: Full profile version tracking
  versions ProfileVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([graduationYear])
  @@index([intendedMajor])
}

// Story 1.7: Profile strength score history tracking
model ProfileHistory {
  id        String  @id @default(cuid())
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Score snapshot
  overallScore      Float
  academicScore     Float
  experienceScore   Float
  leadershipScore   Float
  demographicsScore Float

  recordedAt DateTime @default(now())

  @@index([profileId, recordedAt])
  @@index([recordedAt])
}

// Story 1.10: Profile version history tracking (full snapshots)
model ProfileVersion {
  id        String  @id @default(cuid())
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Full profile snapshot as JSON
  snapshotData Json

  // Changed fields tracking
  changedFields String[] // Array of field names that changed

  // Optional change reason
  changeReason String? @db.Text

  // Metadata
  createdAt DateTime @default(now())

  @@index([profileId, createdAt])
  @@index([createdAt])
}

enum FinancialNeed {
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

// ============================================================================
// Epic 2: Matching Module
// ============================================================================

model Notification {
  id            String       @id @default(cuid())
  studentId     String
  student       Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scholarshipId String
  scholarship   Scholarship  @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)
  matchScore    Float
  priorityTier  PriorityTier
  read          Boolean      @default(false)
  createdAt     DateTime     @default(now())

  @@index([studentId, read])
  @@index([studentId, createdAt])
}

model NotificationPreferences {
  id                String    @id @default(cuid())
  studentId         String    @unique
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  frequency         Frequency @default(DAILY)
  minMatchThreshold Float     @default(75.0)
  emailEnabled      Boolean   @default(true)
  inAppEnabled      Boolean   @default(true)
  updatedAt         DateTime  @updatedAt
}

enum Frequency {
  DAILY
  WEEKLY
  NEVER
}

model Scholarship {
  id String @id @default(cuid())

  // Basic Info
  name         String
  provider     String
  description  String  @db.Text
  website      String?
  contactEmail String?

  // Award Details
  awardAmount    Int // Minimum award amount in dollars
  awardAmountMax Int? // Maximum if range
  numberOfAwards Int     @default(1)
  renewable      Boolean @default(false)
  renewalYears   Int? // Number of years renewable

  // Deadlines
  deadline         DateTime
  announcementDate DateTime?

  // Eligibility Criteria (JSON for flexibility)
  eligibilityCriteria Json

  // Application Requirements
  essayPrompts        Json? // Array of essay prompts
  requiredDocuments   String[] // Array of document types
  recommendationCount Int      @default(0)

  // Document Requirements (Story 4.3)
  documentRequirements Json? // Document validation requirements per type

  // Competition Metadata
  applicantPoolSize Int?
  acceptanceRate    Float? // 0.0 to 1.0

  // Source Verification
  sourceUrl    String?
  lastVerified DateTime @default(now())
  verified     Boolean  @default(false)

  // Search/Discovery
  tags     String[]
  category String?

  applications         Application[]
  matches              Match[]
  notifications        Notification[]
  recommendations      ScholarshipRecommendation[] // Story 5.7

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deadline])
  @@index([awardAmount])
  @@index([provider])
  @@index([category])
  @@index([verified, deadline])
}

model Match {
  id            String @id @default(cuid())
  studentId     String
  scholarshipId String

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  // Score Fields
  overallMatchScore    Float // 0-100
  academicScore        Float @default(0)
  demographicScore     Float @default(0)
  majorFieldScore      Float @default(0)
  experienceScore      Float @default(0)
  financialScore       Float @default(0)
  specialCriteriaScore Float @default(0)

  // Strategic Metrics
  successProbability Float               @default(0) // 0.0 to 1.0 (Story 2.5: updated to percentage 0-100)
  successTier        SuccessTier? // Story 2.5: STRONG_MATCH, COMPETITIVE_MATCH, REACH, LONG_SHOT
  competitionFactor  Float? // Story 2.5: Competition level factor (0.0-1.0)
  priorityTier       PriorityTier        @default(IF_TIME_PERMITS)
  strategicValue     Float               @default(0) // ROI calculation (Story 2.6)
  applicationEffort  EffortLevel         @default(MEDIUM) // Story 2.6: LOW, MEDIUM, HIGH
  effortBreakdown    Json? // Story 2.6: { essays: 2, documents: 3, recommendations: 1 }
  strategicValueTier StrategicValueTier? // Story 2.6: BEST_BET, HIGH_VALUE, MEDIUM_VALUE, LOW_VALUE

  // Gap Analysis
  missingCriteria   Json?
  improvementImpact Json?

  // Metadata
  calculatedAt DateTime @default(now())
  notified     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, scholarshipId])
  @@index([studentId, priorityTier])
  @@index([scholarshipId])
  @@index([overallMatchScore])
}

enum PriorityTier {
  MUST_APPLY
  SHOULD_APPLY
  IF_TIME_PERMITS
  HIGH_VALUE_REACH
}

enum EffortLevel {
  LOW
  MEDIUM
  HIGH
}

enum SuccessTier {
  STRONG_MATCH // 70-100% success probability
  COMPETITIVE_MATCH // 40-69% success probability
  REACH // 10-39% success probability
  LONG_SHOT // <10% success probability
}

enum StrategicValueTier {
  BEST_BET // ROI â‰¥ 5.0 (apply immediately)
  HIGH_VALUE // ROI 3.0-4.9 (strong candidates)
  MEDIUM_VALUE // ROI 1.5-2.9 (if time permits)
  LOW_VALUE // ROI < 1.5 (probably skip)
}

// ============================================================================
// Epic 3: Application Module
// ============================================================================

model Application {
  id            String @id @default(cuid())
  studentId     String
  scholarshipId String

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  // Status Tracking
  status       ApplicationStatus @default(NOT_STARTED)
  priorityTier PriorityTier?

  // Progress Tracking
  essayCount         Int   @default(0)
  essayComplete      Int   @default(0)
  documentsRequired  Int   @default(0)
  documentsUploaded  Int   @default(0)
  recsRequired       Int   @default(0)
  recsReceived       Int   @default(0)
  progressPercentage Float @default(0) // 0-100

  // Timeline Dates
  dateAdded        DateTime  @default(now())
  targetSubmitDate DateTime?
  actualSubmitDate DateTime?
  outcomeDate      DateTime?
  awardAmount      Float?

  // Notes
  notes String? @db.Text

  // Story 3.9: Archive functionality
  archived Boolean @default(false)

  timeline        Timeline?
  outcome         Outcome?
  essays          Essay[]
  documents       Document[]
  recommendations Recommendation[]
  alerts          Alert[] // Story 3.4
  atRiskEvents    AtRiskEvent[] // Story 3.10

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, scholarshipId])
  @@index([studentId, status])
  @@index([studentId])
  @@index([scholarshipId])
  @@index([status])
  @@index([targetSubmitDate])
  @@index([studentId, archived]) // Story 3.9: Efficient filtering of archived applications
}

model Timeline {
  id            String      @id @default(cuid())
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Milestone Dates
  startEssayDate  DateTime?
  requestRecsDate DateTime?
  uploadDocsDate  DateTime?
  finalReviewDate DateTime?
  submitDate      DateTime?

  // Conflict Detection
  hasConflicts  Boolean  @default(false)
  conflictsWith String[] // Array of application IDs

  // Workload Estimation
  estimatedHours Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicationId])
  @@index([submitDate])
}

enum ApplicationStatus {
  NOT_STARTED
  TODO
  IN_PROGRESS
  READY_FOR_REVIEW
  SUBMITTED
  AWAITING_DECISION
  AWARDED
  DENIED
  WAITLISTED // Story 5.1: Added for outcome tracking
  WITHDRAWN
}

// Story 3.4: Deadline Alert System
model Alert {
  id            String      @id @default(cuid())
  applicationId String
  studentId     String
  alertType     AlertType
  status        AlertStatus @default(PENDING)
  sentAt        DateTime?
  snoozeUntil   DateTime?

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicationId])
  @@index([studentId, status])
  @@index([sentAt])
  @@index([snoozeUntil])
}

enum AlertType {
  DEADLINE_30D
  DEADLINE_14D
  DEADLINE_7D
  DEADLINE_3D
  DEADLINE_1D
  DEADLINE_TODAY
}

enum AlertStatus {
  PENDING
  SENT
  SNOOZED
  DISMISSED
}

// ============================================================================
// Epic 4: Content Module
// ============================================================================

model Document {
  id            String  @id @default(cuid())
  studentId     String
  applicationId String?

  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)

  // Document Metadata
  name        String
  type        DocumentType
  fileName    String
  fileSize    Int // Bytes
  mimeType    String
  description String?

  // Storage
  storagePath String
  bucketName  String @default("documents")

  // Version Control
  version           Int        @default(1)
  previousVersionId String?
  versionNote       String?    @db.Text
  previousVersion   Document?  @relation("DocumentVersions", fields: [previousVersionId], references: [id], onDelete: SetNull)
  nextVersions      Document[] @relation("DocumentVersions")

  // Compliance Validation
  compliant        Boolean @default(false)
  validationErrors Json?

  recommendations Recommendation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([applicationId])
  @@index([type])
  @@index([previousVersionId])
}

model Essay {
  id            String  @id @default(cuid())
  studentId     String
  applicationId String?

  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)

  // Content
  title     String
  prompt    String @db.Text
  content   String @db.Text
  wordCount Int    @default(0)

  // Phase Tracking
  phase      EssayPhase @default(DISCOVERY)
  isComplete Boolean    @default(false)

  // AI Metadata
  aiGenerated  Boolean @default(false)
  aiPromptUsed String? @db.Text
  aiModel      String?
  personalized Boolean @default(false)

  // Quality Assessment (Story 4.9)
  qualityScore      Float? // 0-100 overall score
  qualityAssessment Json? // Detailed assessment: { overall, dimensions, suggestions, grammarErrors, authenticityWarnings, assessedAt, assessmentVersion }

  // Prompt Analysis (Story 4.6)
  promptAnalysis Json? // Detailed AI analysis of essay prompt
  promptHash     String? // MD5 hash for caching identical prompts

  // Phase-Specific Metadata (Story 4.7)
  discoveryNotes   Json? // Brainstorming notes from Discovery phase
  outline          Json? // Structure from Structure phase
  revisionFeedback Json? // Tracked suggestions from Revision phase

  // Version Control
  version           Int     @default(1)
  previousVersionId String?
  previousVersion   Essay?  @relation("EssayVersions", fields: [previousVersionId], references: [id], onDelete: SetNull)
  nextVersions      Essay[] @relation("EssayVersions")

  // Reusability (Story 4.8)
  themes             String[] // Tags for matching to prompts
  adaptabilityScores Json? // Cache: { promptHash: { score, confidence, matchingThemes } }
  clonedFrom         String? // Reference to original essay if this is a clone
  originalEssay      Essay?   @relation("EssayClones", fields: [clonedFrom], references: [id], onDelete: SetNull)
  clones             Essay[]  @relation("EssayClones")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([applicationId])
  @@index([phase])
  @@index([promptHash])
  @@index([themes])
  @@index([isComplete])
  @@index([clonedFrom])
  @@index([qualityScore])
}

model Recommendation {
  id            String      @id @default(cuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Recommender Info
  recommenderName  String
  recommenderEmail String
  relationship     String // "Teacher", "Counselor", "Coach", "Employer", "Mentor", "Other"

  // Personal message from student
  personalMessage String? @db.Text

  // Tracking
  status         RecommendationStatus @default(PENDING_REQUEST)
  requestedAt    DateTime             @default(now())
  reminderSentAt DateTime?
  receivedAt     DateTime?
  submittedAt    DateTime?

  // Upload Token
  uploadToken      String    @unique
  uploadLinkExpiry DateTime?

  // Document Reference
  documentId String?   @unique
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  // Reminder count for rate limiting
  reminderCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicationId])
  @@index([status])
  @@index([uploadToken])
  @@index([recommenderEmail])
}

enum DocumentType {
  TRANSCRIPT
  RESUME
  PERSONAL_STATEMENT
  FINANCIAL_DOCUMENT
  RECOMMENDATION_LETTER
  SUPPLEMENTAL_MATERIAL
  OTHER
}

enum EssayPhase {
  DISCOVERY
  STRUCTURE
  DRAFTING
  REVISION
  POLISH
  FINALIZATION
}

enum RecommendationStatus {
  PENDING_REQUEST
  REQUESTED
  REMINDED
  RECEIVED
  SUBMITTED
}

// ============================================================================
// Epic 5: Analytics Module
// ============================================================================

model Outcome {
  id            String @id @default(cuid())
  studentId     String
  applicationId String @unique

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Outcome Details
  result              OutcomeResult
  awardAmountReceived Int? // Dollars
  decisionDate        DateTime?

  // Feedback
  feedback String? @db.Text
  notes    String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([applicationId])
  @@index([result])
  @@index([decisionDate])
}

model AnalyticsSnapshot {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Time Period
  snapshotDate DateTime @default(now())
  periodStart  DateTime
  periodEnd    DateTime

  // Success Metrics
  totalApplications Int   @default(0)
  totalSubmitted    Int   @default(0)
  totalAwarded      Int   @default(0)
  totalDenied       Int   @default(0)
  successRate       Float @default(0) // 0.0 to 1.0

  // Funding Metrics
  totalFundingSecured Int   @default(0) // Dollars
  averageAwardAmount  Float @default(0) // Dollars
  potentialFunding    Int   @default(0) // Dollars from pending

  // Profile Metrics
  profileStrengthScore Float @default(0) // 0-100
  profileCompletion    Float @default(0) // 0-100

  // Activity Metrics
  matchesGenerated  Int @default(0)
  essaysWritten     Int @default(0)
  documentsUploaded Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, snapshotDate])
  @@index([periodStart])
}

enum OutcomeResult {
  AWARDED
  DENIED
  WAITLISTED
  WITHDRAWN
}

// Story 5.3: Gap Analysis - Profile Improvement Recommendations
model GapAnalysisSnapshot {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Snapshot timing
  analysisDate DateTime @default(now())

  // Gap data (stored as JSON for flexibility)
  gaps Json // Array of Gap objects with all properties

  // Profile metrics at analysis time
  profileStrengthCurrent   Int // 0-100
  profileStrengthProjected Int // 0-100 with improvements

  // Impact metrics
  scholarshipsUnlockable Int @default(0) // Count of scholarships improvements would unlock
  potentialFunding       Int @default(0) // Total funding in dollars

  // Roadmap (stored as JSON)
  roadmap Json? // Array of recommendation objects with action steps

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, analysisDate])
  @@index([analysisDate])
}

enum AchievabilityCategory {
  EASY
  MODERATE
  LONG_TERM
}

// Story 3.10: At-Risk Application Detection & Recovery
model AtRiskEvent {
  id                  String         @id @default(cuid())
  applicationId       String
  studentId           String
  detectedAt          DateTime       @default(now())
  resolvedAt          DateTime?
  reason              AtRiskReason
  severity            Severity
  daysUntilDeadline   Int
  progressAtDetection Float
  outcome             AtRiskOutcome?
  resolutionNotes     String?

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([studentId])
  @@index([detectedAt])
}

model EmailLog {
  id            String   @id @default(cuid())
  userId        String
  type          String // 'AT_RISK_ALERT', 'DEADLINE_REMINDER', etc.
  applicationId String?
  sentAt        DateTime @default(now())

  @@index([userId, type, sentAt])
}

enum AtRiskReason {
  SEVEN_DAY_LOW_PROGRESS
  THREE_DAY_INCOMPLETE
  ONE_DAY_NOT_READY
}

enum Severity {
  WARNING // 7-day threshold
  URGENT // 3-day threshold
  CRITICAL // 1-day threshold
}

enum AtRiskOutcome {
  SUBMITTED_ON_TIME
  SUBMITTED_LATE
  MISSED_DEADLINE
  WITHDRAWN
  DEADLINE_EXTENDED
}

// Story 5.4: Profile Improvement Tracker
model ProfileGoal {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  goalType     GoalType
  targetValue  Float
  currentValue Float      @default(0)
  startDate    DateTime   @default(now())
  targetDate   DateTime
  status       GoalStatus @default(NOT_STARTED)

  // Impact estimation (profile strength points)
  impactEstimate Float @default(0)

  // Optional notes
  notes String? @db.Text

  // Milestones tracking
  milestones ProfileGoalMilestone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, status])
  @@index([studentId, targetDate])
  @@index([status])
}

model ProfileGoalMilestone {
  id            String      @id @default(cuid())
  profileGoalId String
  profileGoal   ProfileGoal @relation(fields: [profileGoalId], references: [id], onDelete: Cascade)

  achievedDate          DateTime @default(now())
  description           String
  profileStrengthBefore Float
  profileStrengthAfter  Float

  @@index([profileGoalId])
  @@index([achievedDate])
}

enum GoalType {
  GPA_IMPROVEMENT
  VOLUNTEER_HOURS
  LEADERSHIP_POSITION
  EXTRACURRICULAR
  TEST_SCORE
  CUSTOM
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// Story 5.5: Competitive Positioning Over Time
model ProfilePositionSnapshot {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Snapshot timing
  snapshotDate DateTime @default(now())

  // Profile metrics
  profileStrengthScore Float // 0-100

  // Competitive positioning
  percentileRanking Float // 0-100 (e.g., 85 = top 15%)

  // Scholarship access metrics
  totalMatches       Int @default(0)
  mustApplyCount     Int @default(0)
  shouldApplyCount   Int @default(0)
  ifTimePermitsCount Int @default(0)

  // Funding projection
  projectedFunding Float @default(0) // Expected funding based on match quality

  createdAt DateTime @default(now())

  @@index([studentId, snapshotDate])
  @@index([snapshotDate])
}

model AchievementBadge {
  id          String    @id @default(cuid())
  badgeType   BadgeType @unique
  title       String
  description String
  iconName    String // For displaying appropriate icon

  students StudentAchievement[]

  createdAt DateTime @default(now())

  @@index([badgeType])
}

model StudentAchievement {
  id        String           @id @default(cuid())
  studentId String
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     AchievementBadge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  unlockedAt DateTime @default(now())

  @@unique([studentId, badgeId])
  @@index([studentId])
  @@index([badgeId])
}

enum BadgeType {
  TOP_25_ACADEMIC
  TOP_10_ACADEMIC
  LEADERSHIP_CHAMPION
  COMMUNITY_IMPACT
  QUICK_IMPROVER
  GOAL_ACHIEVER
}

// Story 5.6: Counselor Portal - Student Monitoring
model Counselor {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName           String
  lastName            String
  email               String  @unique
  schoolName          String
  schoolDistrict      String?
  certificationNumber String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students         StudentCounselorPermission[]
  notes            CounselorNote[]
  recommendations  ScholarshipRecommendation[] // Story 5.7

  @@index([userId])
  @@index([email])
  @@index([schoolName])
}

model StudentCounselorPermission {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  counselorId String
  counselor   Counselor @relation(fields: [counselorId], references: [id], onDelete: Cascade)

  permissionLevel PermissionLevel  @default(VIEW_DETAILED)
  status          PermissionStatus @default(PENDING)

  grantedAt DateTime?
  revokedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, counselorId])
  @@index([counselorId, status])
  @@index([studentId, status])
}

model CounselorNote {
  id          String    @id @default(cuid())
  counselorId String
  counselor   Counselor @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  studentId   String
  content     String    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([counselorId, studentId])
  @@index([studentId])
}

enum PermissionLevel {
  VIEW_BASIC // Profile strength, funding totals only
  VIEW_DETAILED // Full access: applications, essays, documents
}

enum PermissionStatus {
  PENDING // Request sent, awaiting student approval
  ACTIVE // Permission granted
  REVOKED // Student revoked access
  EXPIRED // Auto-expired (optional future feature)
}

// Story 5.7: Counselor Recommendation Engine
model ScholarshipRecommendation {
  id            String      @id @default(cuid())
  counselorId   String
  counselor     Counselor   @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  studentId     String
  scholarshipId String
  scholarship   Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  // Counselor's explanation
  note String? @db.Text // Why this scholarship is a good fit

  // Status tracking
  status       RecommendationResponseStatus @default(PENDING)
  responseNote String?                      @db.Text // Optional student's decline reason

  // Timestamps
  createdAt    DateTime  @default(now())
  respondedAt  DateTime?
  updatedAt    DateTime  @updatedAt

  @@unique([counselorId, studentId, scholarshipId]) // Prevent duplicate recommendations
  @@index([counselorId])
  @@index([studentId, status])
  @@index([status])
  @@index([createdAt])
}

enum RecommendationResponseStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Story 5.8: Parent/Guardian View - Progress Monitoring
model StudentParentAccess {
  id        String   @id @default(cuid())
  studentId String
  parentId  String // User with PARENT role

  permissions    ParentPermission[]
  accessGranted  Boolean            @default(false)
  grantedAt      DateTime?
  revokedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, parentId])
  @@index([studentId])
  @@index([parentId])
  @@index([parentId, accessGranted])
}

model ParentNotificationPreferences {
  id        String   @id @default(cuid())
  parentId  String
  studentId String

  notifyOnSubmit   Boolean                     @default(true)
  notifyOnAward    Boolean                     @default(true)
  notifyOnDeadline Boolean                     @default(true)
  emailFrequency   ParentNotificationFrequency @default(REALTIME)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
  @@index([emailFrequency])
}

enum ParentPermission {
  VIEW_APPLICATIONS
  VIEW_OUTCOMES
  VIEW_PROFILE
  RECEIVE_NOTIFICATIONS
}

enum ParentNotificationFrequency {
  REALTIME
  DAILY_DIGEST
  WEEKLY_DIGEST
  OFF
}

// Story 5.9: Export & Reporting
model ExportHistory {
  id        String       @id @default(cuid())
  studentId String
  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  exportType   ExportType
  format       ExportFormat

  // Date range for the export
  dateRangeStart DateTime?
  dateRangeEnd   DateTime?

  // Privacy settings applied (stored as JSON)
  privacySettings Json? // { excludePersonalInfo: boolean, excludeSensitiveDetails: boolean }

  // File metadata
  fileSize Int? // Bytes

  // Timestamps
  downloadedAt DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([studentId, downloadedAt])
  @@index([downloadedAt])
}

enum ExportType {
  APPLICATIONS_LIST
  FUNDING_SUMMARY
  ANALYTICS_REPORT
  FULL_DATA
}

enum ExportFormat {
  CSV
  PDF
  JSON
}

// ============================================================================
// Story 5.10: Platform-Wide Search & Help System
// ============================================================================

// Recent searches tracking (limit 5 per student)
model RecentSearch {
  id        String   @id @default(cuid())
  studentId String
  query     String
  resultCount Int     @default(0)
  timestamp DateTime @default(now())

  @@index([studentId, timestamp])
  @@index([timestamp])
}

// Help articles content management
model HelpArticle {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String       @db.Text
  content     String       @db.Text // Markdown content
  category    HelpCategory
  context     String[]     // Routes where article is relevant: ['/dashboard', '/scholarships']
  keywords    String[]     // Search keywords
  order       Int          @default(0) // Display order within category
  relatedArticleIds String[] // IDs of related articles

  feedback HelpFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([slug])
}

enum HelpCategory {
  GETTING_STARTED
  SCHOLARSHIPS
  APPLICATIONS
  ESSAYS
  DOCUMENTS
  ANALYTICS
  TROUBLESHOOTING
}

// Help article feedback tracking
model HelpFeedback {
  id            String      @id @default(cuid())
  helpArticleId String
  helpArticle   HelpArticle @relation(fields: [helpArticleId], references: [id], onDelete: Cascade)
  studentId     String
  helpful       Boolean
  comment       String?     @db.Text
  timestamp     DateTime    @default(now())

  @@index([helpArticleId])
  @@index([studentId, timestamp])
  @@index([timestamp])
}

// Search analytics for optimization
model SearchAnalytics {
  id               String   @id @default(cuid())
  studentId        String
  query            String
  resultCount      Int      @default(0)
  clickedResultId  String?
  clickedResultType String? // 'scholarship', 'application', 'essay', 'document'
  timestamp        DateTime @default(now())

  @@index([query])
  @@index([studentId, timestamp])
  @@index([timestamp])
}
